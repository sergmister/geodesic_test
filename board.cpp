#include <iostream>
#include <vector>
#include <stdint.h>
#include <math.h>

std::vector<uint8_t> matrix_graph(int n, int arr[][6]) {

    std::vector<uint8_t> graph(n * n, 0);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 6; j++) {
            if (arr[i][j] != 0) {
                graph[i * n + (arr[i][j] - 1)] = 1;
                graph[(arr[i][j] - 1) * n + i] = 1;
            }
        }
    }

    return graph;
}

std::vector<std::vector<uint16_t>> adjacency_list_graph(int n, int arr[][6]) {

    std::vector<std::vector<uint16_t>> graph(n);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 6; j++) {
            if (arr[i][j] != 0) {
                graph[i].push_back(arr[i][j] - 1);
            }
        }
    }

    return graph;
}

std::vector<std::vector<uint16_t>> geodesic_graph(int n) {

    if (n < 2) {
        throw "bruh";
    }

    int v = 0;
    std::vector<std::vector<uint16_t>> graph(3 * ((n - 1) * (n - 1) + (n - 1)) / 2);

    std::vector<uint16_t> right, bottom, left;
    std::vector<uint16_t> b_right, b_bottom, b_left;

    auto join = [&] (uint16_t v1, uint16_t v2) {
        graph[v1].push_back(v2);
        graph[v2].push_back(v1);
    };

    for (int i = 1; i < n; i++) {
        b_right.swap(right);
        b_bottom.swap(bottom);
        b_left.swap(left);

        right.clear();
        bottom.clear();
        left.clear();

        right.shrink_to_fit();
        bottom.shrink_to_fit();
        left.shrink_to_fit();

        for (int j = 0; j < i; j++) {
            right.push_back(v++);
            if (j > 0) {
                join(v - 1, v - 2);
            }
        }
        for (int j = 0; j < i; j++) {
            bottom.push_back(v++);
            if (j > 0) {
                join(v - 1, v - 2);
            }
        }
        for (int j = 0; j < i; j++) {
            left.push_back(v++);
            if (j > 0) {
                join(v - 1, v - 2);
            }
        }

        join(right[0], left[left.size() - 1]);
        join(bottom[0], right[right.size() - 1]);
        join(left[0], bottom[bottom.size() - 1]);

        if (b_right.size() > 0) {
            join(right[0], b_right[0]);
            for (int j = 1; j < (right.size() - 1); j++) {
                join(right[j], b_right[j - 1]);
                join(right[j], b_right[j]);
            }
            join(right[right.size() - 1], b_right[b_right.size() - 1]);
            join(right[right.size() - 1], b_bottom[0]);
        }
        if (b_bottom.size() > 0) {
            join(bottom[0], b_bottom[0]);
            for (int j = 1; j < (bottom.size() - 1); j++) {
                join(bottom[j], b_bottom[j - 1]);
                join(bottom[j], b_bottom[j]);
            }
            join(bottom[bottom.size() - 1], b_bottom[b_bottom.size() - 1]);
            join(bottom[bottom.size() - 1], b_left[0]);
        }
        if (b_left.size() > 0) {
            join(left[0], b_left[0]);
            for (int j = 1; j < (left.size() - 1); j++) {
                join(left[j], b_left[j - 1]);
                join(left[j], b_left[j]);
            }
            join(left[left.size() - 1], b_left[b_left.size() - 1]);
            join(left[left.size() - 1], b_right[0]);
        }
    }

    return graph;
}

/*
int main() {
    std::vector<std::vector<uint16_t>> graph = geodesic_graph(5);
    //std::cout << graph << std::endl;
    int x;
}
*/

int neighbors[93][6] = {
{ 5,  9,  3,  6,  8,  2},
{ 9, 13,  3, 12, 10,  1},
{13,  5, 14,  2,  4,  1},
{ 5, 15, 17,  3, 16, 14},
{ 4,  6, 17,  1, 18,  3},
{ 5,  7,  1, 18, 19,  8},
{19,  6,  8, 21, 20,  0},
{ 9,  7, 22,  1,  6, 21},
{10,  8,  2, 22,  1, 23},
{ 9, 11,  2, 23, 12, 24},
{12, 26, 25, 24, 10,  0},
{11, 13, 27,  2, 26, 10},
{14, 12, 27,  2, 28,  3},
{13, 15,  3, 28, 29,  4},
{30, 29, 16, 14,  4,  0},
{32, 15, 17, 31, 30,  4},
{ 5, 32, 33, 16,  4, 18},
{34,  5, 33, 19,  6, 17},
{ 7, 34, 18, 35,  6, 20},
{36,  7, 35, 37, 19, 21},
{38,  7, 37, 22,  8, 20},
{ 9, 38, 23,  8, 21, 39},
{40,  9, 24, 39, 10, 22},
{40, 11, 23, 41, 25, 10},
{42, 11, 41, 43, 26, 24},
{44, 11, 43, 27, 12, 25},
{13, 44, 28, 12, 26, 45},
{46, 13, 29, 45, 14, 27},
{46, 15, 28, 47, 30, 14},
{15, 48, 47, 31, 29, 16},
{32, 48, 49, 30, 16, 50},
{16, 51, 31, 17, 50, 33},
{32, 34, 51, 17, 52, 18},
{52, 19, 18, 35, 33, 53},
{36, 34, 53, 19, 20, 54},
{20, 55, 35, 56, 54, 37},
{38, 36, 21, 57, 20, 56},
{58, 21, 39, 57, 22, 37},
{38, 40, 23, 59, 58, 22},
{24, 59, 60, 39, 41, 23},
{42, 40, 25, 61, 24, 60},
{62, 25, 63, 61, 43, 41},
{44, 42, 64, 26, 25, 63},
{65, 26, 45, 43, 27, 64},
{44, 46, 28, 66, 65, 27},
{66, 29, 67, 45, 47, 28},
{48, 46, 68, 30, 29, 67},
{69, 30, 47, 31, 68, 49},
{48, 71, 69, 31, 70, 50},
{71, 32, 49, 72, 51, 31},
{32, 73, 33, 50, 72, 52},
{34, 73, 53, 33, 51, 74},
{34, 75, 52, 35, 74, 54},
{75, 36, 53, 76, 55, 35},
{36, 77, 56, 54, 76, 78},
{36, 79, 37, 55, 78, 57},
{79, 38, 37, 58, 80, 56},
{38, 81, 57, 39, 59, 80},
{81, 40, 60, 39, 82, 58},
{40, 83, 41, 59, 82, 61},
{83, 42, 41, 62, 84, 60},
{42, 85, 61, 63, 86, 84},
{42, 87, 64, 86, 62, 43},
{87, 44, 88, 63, 65, 43},
{44, 89, 45, 64, 66, 88},
{46, 89, 45, 67, 90, 65},
{46, 91, 68, 90, 66, 47},
{91, 48, 92, 67, 69, 47},
{48, 93, 49, 68, 92, 70},
{71, 93, 49, 69,  0,  0},
{70, 72, 50, 49,  0,  0},
{73, 71, 50, 51,  0,  0},
{72, 51, 52, 74,  0,  0},
{75, 73, 53, 52,  0,  0},
{74, 76, 54, 53,  0,  0},
{77, 75, 54, 55,  0,  0},
{76, 55, 78,  0,  0,  0},
{79, 77, 56, 55,  0,  0},
{80, 78, 57, 56,  0,  0},
{79, 81, 57, 58,  0,  0},
{59, 58, 82, 80,  0,  0},
{83, 81, 60, 59,  0,  0},
{84, 82, 61, 60,  0,  0},
{83, 85, 61, 62,  0,  0},
{86, 62, 84,  0,  0,  0},
{85, 87, 63, 62,  0,  0},
{88, 86, 63, 64,  0,  0},
{89, 87, 64, 65,  0,  0},
{90, 66, 88, 65,  0,  0},
{89, 91, 67, 66,  0,  0},
{92, 90, 67, 68,  0,  0},
{93, 91, 68, 69,  0,  0},
{92, 69, 70,  0,  0,  0},
};

float cords[93][2] = {
{0.4505, 0.4213},
{0.5479, 0.4218},
{0.4987, 0.5035},
{0.4439, 0.5814},
{0.3947, 0.5065},
{0.3535, 0.4273},
{0.3199, 0.3471},
{0.4084, 0.3364},
{0.4998, 0.3324},
{0.5911, 0.3374},
{0.6795, 0.3491},
{0.6448, 0.4289},
{0.6026, 0.5076},
{0.5525, 0.5820},
{0.4978, 0.6503},
{0.4045, 0.6709},
{0.3418, 0.5921},
{0.2917, 0.5067},
{0.2540, 0.4142},
{0.2477, 0.3061},
{0.3480, 0.2586},
{0.4497, 0.2453},
{0.5509, 0.2458},
{0.6524, 0.2603},
{0.7522, 0.3088},
{0.7445, 0.4169},
{0.7056, 0.5090},
{0.6545, 0.5938},
{0.5908, 0.6719},
{0.4973, 0.7314},
{0.3931, 0.7596},
{0.3048, 0.6830},
{0.2394, 0.5920},
{0.1922, 0.4910},
{0.1694, 0.3782},
{0.1725, 0.2634},
{0.2744, 0.2045},
{0.3869, 0.1687},
{0.5008, 0.1592},
{0.6146, 0.1700},
{0.7267, 0.2070},
{0.8278, 0.2670},
{0.8295, 0.3819},
{0.8053, 0.4944},
{0.7569, 0.5948},
{0.6904, 0.6851},
{0.6011, 0.7608},
{0.4968, 0.8156},
{0.3872, 0.8504},
{0.2862, 0.7763},
{0.2012, 0.6838},
{0.1384, 0.5766},
{0.0998, 0.4586},
{0.0857, 0.3368},
{0.0929, 0.2182},
{0.1961, 0.1541},
{0.3127, 0.1064},
{0.4378, 0.0813},
{0.5649, 0.0820},
{0.6896, 0.1084},
{0.8056, 0.1574},
{0.9080, 0.2227},
{0.9137, 0.3414},
{0.8981, 0.4630},
{0.8581, 0.5806},
{0.7940, 0.6870},
{0.7079, 0.7786},
{0.6060, 0.8516},
{0.4963, 0.9049},
{0.3868, 0.9466},
{0.2777, 0.8744},
{0.1781, 0.7816},
{0.0966, 0.6704},
{0.0397, 0.5457},
{0.0084, 0.4155},
{0.0000, 0.2879},
{0.0080, 0.1702},
{0.1101, 0.1056},
{0.2291, 0.0502},
{0.3617, 0.0129},
{0.5018, 0.0000},
{0.6417, 0.0145},
{0.7739, 0.0532},
{0.8921, 0.1100},
{0.9935, 0.1757},
{1.0000, 0.2935},
{0.9901, 0.4209},
{0.9571, 0.5508},
{0.8988, 0.6748},
{0.8160, 0.7851},
{0.7153, 0.8768},
{0.6053, 0.9478},
{0.4958, 1.0000},
};